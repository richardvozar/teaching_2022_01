HÁTRA VAN:
-listák
-fájlkezelés


LISTÁK ISMÉTLÉS
listák: dinamikus méretű adatszerkezet, tetszőleges számú, nem feltétlen azonos típusú elemek tárolására alkalmas adatszerkezet

lista létrehozása:

ures1 = list()
ures2 = []

kutyak = ['Ubul', 'Pamacs', 'Scooby Doo'] # stringeket tároló lista

# lista hosszának lekérdezése
print(len(kutyak))

listaelemek indexelése: listák elemeit el tudjuk érni
elérni annyit takar, hogy: le tudjuk kérdezni, vagy akár át tudjuk írni

lista_neve[index]

0-tól kezdődnek az indexek, szintén működik a negatív index, illetve az intervallumos indexelés:

gyumolcsok = ["alma", "citrom", "barack", "pomeló"]

print(gyumolcsok[0])        # a legelső listaelem
print(gyumolcsok[-1])       # az utolsó listaelem
print(gyumolcsok[1:3])      # az 1-3. indexű elemek (a 3. indexű elem már nincs benne)
print(gyumolcsok[2:])       # az elemek a 2. indextől a lista végéig
print(gyumolcsok[:])        # a teljes lista
print(gyumolcsok[::2])      # minden második listaelem

Ha egy listát meg szeretnénk fordítani, akkor a tanult trükköt itt is használhatjuk.

print(gyumolcsok[::-1])


A stringekkel ellentétben a listáknál lehetőségünk van egy adott indexen lévő elem értékének módosítására.
Ezt úgy is mondjuk, hogy a lista egy mutable (módosítható) típus.
(A stringek karaktereit nem tudtuk módosítani, hiszen a string egy immutable típus volt.)

gyumolcsok = ["alma", "citrom", "barack", "pomeló"]
gyumolcsok[1] = "görögdinnye"       # listaelem módosítása

print(gyumolcsok)


Listaelemek bejárása:

gyumolcsok = ["alma", "citrom", "barack", "pomeló"]

for gyumi in gyumolcsok:            # listaszerű for ciklus
    print(gyumi)

print("--------------------")

for i in range(len(gyumolcsok)):    # index alapú for ciklus
    print(gyumolcsok[i])


Referencia szerinti működés:

Pythonban a listák referencia szerint működnek. Ez azt jelenti, hogy ha átadunk egy függvénynek egy listát paraméterül,
akkor a függvény nem a kapott lista másolatával, hanem az eredeti listával fog dolgozni.

def nagybetusit(lista):
    for i in range(len(lista)): # egy stringekből álló lista összes elemét nagybetűsítjük
        lista[i] = lista[i].upper()

    return lista

gyumolcsok = ["alma", "citrom", "barack", "pomeló"]
nagybetus_gyumolcsok = nagybetusit(gyumolcsok)

print(nagybetus_gyumolcsok)
print(gyumolcsok)               # az eredeti lista is módosul!


Ha nem szeretnénk, hogy az eredeti listánk tartalmát módosítsa a függvény,
akkor készítsünk a listánkról egy másolatot, és dolgozzunk azzal!
Egy lista lemásolásához használjuk a lista_neve[:] szintaxist!

def nagybetusit(lista):
    for i in range(len(lista)):
        lista[i] = lista[i].upper()

    return lista

gyumolcsok = ["alma", "citrom", "barack", "pomeló"]
nagybetus_gyumolcsok = nagybetusit(gyumolcsok[:])   # egy másolatot adunk át

print(nagybetus_gyumolcsok)
print(gyumolcsok)               # az eredeti lista tartalma megmarad!


Adott indexű listaelem törlése
A del lista[i] szintaxissal törölhetjük a lista i. indexén található elemet.

Példa: A 2. indexű elem törlése egy listából


bosszuallok = ["Thor", "Hulk", "Vízió", "Hangya", "Vasember"]
del bosszuallok[2]

print(bosszuallok)


Listák összefűzése
A + (plusz) operátorral összefűzhetjük két vagy több lista tartalmát.

Példa: Két lista összefűzése


bosszuallok1 = ["Thor", "Hulk", "Vízió"]
bosszuallok2 = ["Hangya", "Vasember"]

osszefuzott = bosszuallok1 + bosszuallok2
print(osszefuzott)


Egy lista extend() metódusával hozzá tudjuk fűzni az adott listához egy másik lista elemeit.

Példa: A bosszuallok1 listához hozzáfűzzük a bosszuallok2 lista elemeit


bosszuallok1 = ["Thor", "Hulk", "Vízió"]
bosszuallok2 = ["Hangya", "Vasember"]

bosszuallok1.extend(bosszuallok2)
print(bosszuallok1)


Listakezelő függvények
Pythonban számos beépített függvényt használhatunk listák kezelésére. Néhány fontosabb:

lista.append(e): beszúrja az e elemet a lista végére
lista.insert(i, e): beszúrja az e elemet a lista i. indexére
lista.remove(e): törli a lista-ból az e elem legelső előfordulását
lista.sort(): rendezi a lista elemeit
helyben rendez, így az eredeti listát módosítja (ha ezt nem szeretnénk, akkor használhatjuk a sorted(lista) függvényt)
többféle adattípusra is működik: szövegeket tartalmazó listákat ábécé-sorrendbe, számokat tartalmazó listákat növekvő sorrendbe rendezi alapértelmezés szerint
lista.clear(): kiüríti a lista-t.
Példa: Listakezelő függvények alkalmazása


bosszuallok = ["Thor", "Hulk", "Vízió", "Thor"]

bosszuallok.append("Hangya")        # hozzáfűzés a lista végéhez
print(bosszuallok)
bosszuallok.insert(0, "Vasember")   # beszúrás a lista elejére
print(bosszuallok)

bosszuallok.remove("Thor")          # a legelső "Thor"-t törli
bosszuallok.sort()                  # rendezés (itt: ábécé-sorrend)
print(bosszuallok)

bosszuallok.clear()                 # lista kiürítése
print(bosszuallok)


