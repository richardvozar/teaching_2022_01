0. feladat: Szöveg titkosítása

Robi és Misi jó barátok, sőt történetesen ugyanannál a cégnél munkatársak.
Kitalálták, hogy azért, hogy a főnökük ne érthesse meg az egymásnak írt üzeneteiket,
egy egyszerű titkosítást használnak.
A küldő kódolja az üzenetet az elküldés előtt, a fogadó pedig visszafejti azt.

Írj egy kodol nevű függvényt, amely 3 paramétert kap: rendre a titkosítandó üzenetet,
- egy n pozitív egész számot,
- valamint egy c karaktert.
A függvény alakítsa át az üzenetet úgy, hogy az üzenet minden betűje után n darab c karaktert tegyen!
A függvény visszatérési értéke a kódolt üzenet.

Példa:

Input: 'Pizza delben?', 3, 'x'
Return: 'Pxxxixxxzxxxzxxxaxxx xxxdxxxexxxlxxxbxxxexxxnxxx?xxx'

_______________________________________________________________________________

1. feladat: Titkosított szöveg visszafejtése

Természetesen Robi és Misi kommunikációjához fontos, hogy a két kolléga vissza tudja fejteni egymás kódolt üzeneteit.

Írj egy dekodol nevű függvényt, amely 2 paramétert kap: rendre a kódolt szöveget és egy n pozitív egész számot!
A szöveget úgy tudjuk dekódolni, hogy a szöveg első karakterétől indulunk,
mindig kihagyunk n darab karaktert, és a nem kihagyott karaktereket összeolvassuk.
A függvény visszatérési értéke a dekódolt szöveg.

Példa:

Input: 'Pxxxixxxzxxxzxxxaxxx xxxdxxxexxxlxxxbxxxexxxnxxx?xxx', 3
Return: 'Pizza delben?'

_______________________________________________________________________________

2. feladat: Elmozdulás

Írj egy elmozdulas nevű függvényt, amely egy útvonalat elkódoló szöveget kap paraméterül!
A szövegben előforduló betűk és jelentésük:
- F (1 lépést megyünk felfelé)
- L (1 lépést megyünk lefelé)
- J (1 lépést megyünk jobbra)
- B (1 lépést megyünk balra).

A függvény adja vissza a példában látható formátumban azt, hogy a kiinduló pozíciónkhoz képest,
az útvonal követésével mennyit megyünk a vízszintes, illetve a függőleges irányba!
Ha az útvonal követésével a kiinduló pozícióba érünk vissza,
akkor a függvény a "Nem mentunk sehova" szöveggel térjen vissza!

Például, ha az útvonalunk a JBBFB, akkor 1 lépést mentünk jobbra, majd 2-t balra, 1-et fel és végül 1-et balra.
Így az eredeti pozíciónkhoz képest 2 lépéssel kerültünk balra és 1 lépéssel kerültünk feljebb.

Példa:

Input: 'JJFBFFFFFFBBBL'
Return: '2 lepes balra, 6 lepes fel'

Input: 'FBLLLJLLJ'
Return: '1 lepes jobbra, 4 lepes le'

Input: 'FFF'
Return: '3 lepes fel'

Input: 'FFLLBBJJ'
Return: 'Nem mentunk sehova'

_______________________________________________________________________________

3. feladat: Gyorsétterem
A kedvenc gyorséttermünkben a vásárlók belépés után sorszámot húznak, amely alapján leadhatják a rendelésüket.
Az étteremben két kassza üzemel: egyiknél a páros, másiknál pedig a páratlan sorszámú rendeléseket szolgálják ki.

Írj egy kasszahoz_rendel nevű függvényt, amely egy olyan szöveget kap paraméterül, amely pontosvesszővel elválasztott (egész) számokat tartalmaz!
A függvény visszatérési értéke egy 2-dimenziós lista, amely 2 részlistából áll:
- az első részlistába a páros,
- a második részlistába pedig a páratlan
sorszámok kerülnek növekvő sorrendben.

Példa:

Input: '42;38;45;40;41;39;44;43;46'
Return: [[38, 40, 42, 44, 46], [39, 41, 43, 45]]

Input: '12;16;14'
Return: [[12, 14, 16], []]

_______________________________________________________________________________

4. feladat: Mátrixok összeadása
Írj egy matrix_osszead nevű függvényt, amely két mátrixot (2-dimenziós listát) vár paraméterül, és kiszámítja ezen két mátrix összegét!
A feladat megoldása során ne használj semmilyen beépített vagy külső Python csomagot!

Fontos, hogy az összeadásnál mindkét mátrix dimenziószáma megegyezzen (pl. mindkét mátrix n x m-es legyen, azaz n sorból és m oszlopból álljon).
Ha a két mátrix dimenziószáma eltér, akkor a függvény térjen vissza egy üres listával!
Ha a dimenziószámok megegyeznek, akkor a visszatérési érték a két mátrix összege legyen (ami szintén egy mátrix)!

Segítség: Két mátrix összegét úgy kapjuk, hogy az azonos indexeken lévő elemeket rendre összeadogatjuk.
Például: Mátrix összeadás

[[7, 1, 3],
 [4, 0, 2]]

 +
 
[[2, 5, 5],
 [8, 6, 0]]

=

[[7+2, 1+5, 3+5],
 [4+8, 0+6, 2+0]]

=

[[9, 6, 8],
 [14, 6, 2]]


Példa:

Input: [[7, 1, 3], [4, 0, 2]], [[2, 5, 5], [8, 6, 0]]
Return: [[9, 6, 8], [12, 6, 2]]

Input: [[5, 1], [3, 2], [8, 6]], [[4, 8], [2, 7]]
Return: []

_______________________________________________________________________________

